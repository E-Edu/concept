{
	"openapi": "3.0.1",
	"info": {
		"title": "User Microservice",
		"version": "v1"
	},
	"servers": [{
			"url": "user.e-edu.the-morpheus.de"
		},
		{
			"url": "http://localhost:80"
		}
	],
	"tags": [{
		"name": "user",
		"description": "User Microservice"
	}],
	"paths": {
		"/user": {
			"post": {
				"tags": [
					"user"
				],
				"summary": "Creates a new user",
				"description": "Notice that Passwords should be stored by being hashed with BCrypt.",
				"operationId": "create_user",
				"security": [{
						"JWT": [
							"write"
						]
					},
					{
						"ServiceToken": [
							"write"
						]
					}
				],
				"parameters": [{
					"name": "Authorization",
					"in": "header",
					"required": true,
					"schema": {
						"type": "string"
					}
				}],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"email": {
										"type": "string"
									},
									"password": {
										"type": "string"
									},
									"first_name": {
										"type": "string"
									},
									"last_name": {
										"type": "string"
									},
									"teacher_token": {
										"type": "string",
										"description": "If there is no teacher token it will send a empty string"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "After processing this request a email will be dispatched to the users email address, containing a link for verifying their account structured in the following way **https://DOMAIN.TLD/verify?token=$TOKEN**. In case the teacher token isn't *null* and valid the teacher is instantly verified and marked as teacher."
					},
					"400": {
						"description": "Returns *USER_ALREADY_REGISTERED* as error string",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string"
										}
									}
								}
							}
						}
					},
					"503": {
						"description": "Returns *DATABASE_ERROR* as error string",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string"
										}
									}
								}
							}
						}
					}
				}
			},
			"put": {
				"tags": [
					"user"
				],
				"summary": "Set user info",
				"description": "The specified user if not null (then the owner of the session) will have their flags altered, if the owner of the session has the right permission. A user can NEVER alter their own report_spammer!",
				"operationId": "set_user",
				"parameters": [{
					"name": "Authorization",
					"in": "header",
					"required": true,
					"schema": {
						"type": "string"
					}
				}],
				"security": [{
						"JWT": [
							"write"
						]
					},
					{
						"ServiceToken": [
							"write"
						]
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"session": {
										"type": "string"
									},
									"user": {
										"type": "string"
									},
									"teacher": {
										"type": "boolean"
									},
									"admin": {
										"type": "boolean"
									},
									"priviliged_student": {
										"type": "boolean"
									},
									"report_spammer": {
										"type": "boolean"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Ok"
					},
					"400": {
						"description": "Returns *INVALID_SESSION* as error string",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Returns *INVALID_PERMISSION* as error string",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string"
										}
									}
								}
							}
						}
					},
					"503": {
						"description": "Returns *DATABASE_ERROR* as error string",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/user/{user_guid}": {
			"get": {
				"tags": [
					"user"
				],
				"summary": "Gets user info.",
				"description": "If **user** is set to *null* information about the owner of the Session is returned, otherwise information of the requested **user** is provided, if the session owner has the right permission to request them.",
				"operationId": "get_user",
				"parameters": [{
						"name": "Authorization",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "user_guid",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"security": [{
						"JWT": [
							"read"
						]
					},
					{
						"ServiceToken": [
							"write"
						]
					}
				],
				"responses": {
					"200": {
						"description": "The response will return privilege flags of the requested User in case the verification was successful and a error *String* in case a **Error** ocurred. **report_spammer** will always return 0 unless the session owner has the correct rights.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"teacher": {
											"type": "boolean"
										},
										"admin": {
											"type": "boolean"
										},
										"priviliged_student": {
											"type": "boolean"
										},
										"report_spammer": {
											"type": "integer"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Returns *INVALID_SESSION* as error string",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Returns *INVALID_PERMISSION* as error string",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string"
										}
									}
								}
							}
						}
					},
					"503": {
						"description": "Returns *DATABASE_ERROR* as error string",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/user/{user_guid}/ban": {
			"post": {
				"tags": [
					"user"
				],
				"summary": "Bans an User",
				"operationId": "ban_user",
				"security": [{
					"ServiceToken": [
						"read"
					]
				}],
				"parameters": [{
						"name": "Authorization",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "user_guid",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Ok"
					},
					"4XX": {
						"description": "User Error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string"
										}
									}
								}
							}
						}
					},
					"5XX": {
						"description": "Server Error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/user/verify": {
			"patch": {
				"tags": [
					"user"
				],
				"summary": "Verifies an email token",
				"operationId": "verify",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"token": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"session": {
											"type": "string"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Returns *INVALID_TOKEN* as error string",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string"
										}
									}
								}
							}
						}
					},
					"503": {
						"description": "Returns *DATABASE_ERROR* as error string",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/user/session": {
			"post": {
				"tags": [
					"user"
				],
				"summary": "Checks whether a session is valid or not",
				"operationId": "session",
				"security": [{
						"JWT": [
							"read"
						]
					},
					{
						"ServiceToken": [
							"write"
						]
					}
				],
				"parameters": [{
					"name": "Authorization",
					"in": "header",
					"required": true,
					"schema": {
						"type": "string"
					}
				}],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"session": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Ok"
					},
					"401": {
						"description": "Returns *INVALID_SESSION* as error string",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string"
										}
									}
								}
							}
						}
					},
					"503": {
						"description": "Returns *DATABASE_ERROR* as error string",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/user/login": {
			"post": {
				"tags": [
					"user"
				],
				"summary": "Used to login a user",
				"operationId": "login",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"email": {
										"type": "string"
									},
									"password": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Oka",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"session": {
											"type": "string"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Returns *INVALID_LOGIN* as error string",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string"
										}
									}
								}
							}
						}
					},
					"503": {
						"description": "Returns *DATABASE_ERROR* as error string",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string"
										}
									}
								}
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"securitySchemes": {
			"JWT": {
				"type": "http",
				"scheme": "bearer"
			},
			"ServiceToken": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "randomstring"
			}
		}
	}
}