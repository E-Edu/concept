openapi: 3.0.1
info:
  title: Inter-Microservice Communication WIP
  description: Utilises a Publisher/Subscriber Model
  version: v1 WIP
servers:
- url: https://task.e-edu.the-morpheus.de/
- url: https://user.e-edu.the-morpheus.de/
- url: https://report.e-edu.the-morpheus.de/

tags:
- name: General
  description: Pub/Sub Endpoints that every MS should have
- name: User Microservice
  description: Endpoints where the User MS is Pub
- name: Task Microservice
  description: Endpoints where the Task MS is Pub
- name: Report Microservice
  description: Endpoints where the Report MS is Pub

paths:
  /user_ban:
    post:
      tags:
      - Report Microservice
      summary:  The Pub/Sub endpiont between Report and User MS to set if a user is banned
      security: 
      - ServiceToken: [write]
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                ticket_id:
                  type: string
                  format: guid
                timestamp:
                  type: string

      responses:
        '200':
          description: OK
        '400':
          description: User Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /service_start/:
    post:
      summary: Informed when a service starts
      tags:
      - General
      security:
        - ServiceToken: [write]
      parameters:
      - name: Authorization
        in: header
        required: true
        schema: 
          title: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ms_name:
                  type: string
                timestamp:
                  type: string
      responses:
        '200':
          description: OK
        '400':
          description: User Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /service_stop/:
    post:
      summary: Informed when a service stops
      tags:
      - General
      security:
        - ServiceToken: [write]
      parameters:
      - name: Authorization
        in: header
        required: true
        schema: 
          title: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ms_name:
                  type: string
                timestamp:
                  type: string
      responses:
        '200':
          description: OK
        '400':
          description: User Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    ServiceToken:
      type: http
      scheme: bearer
      bearerFormat: randomstring
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    MethodNotAllowed:
      description: Method not allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotAcceptable:
      description: Not acceptable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    RequestTimeout:
      description: Request timeout
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Gone:
      description: Gone
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    LengthRequiered:
      description: Length requiered
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    PreconditionFailed:
      description: Precondition failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    PayloadTooLarge:
      description: Payload too large
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    RequestURITooLong:
      description: Request-URI too long
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    RequestRangeNotSatisfiable:
      description: Request range not satisfiable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ExpectationFailed:
      description: Expectation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnprocessableEntity:
      description: Unprocessable entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Locked:
      description: Locked
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    TooManyRequests:
      description: Too many requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NoResponse:
      description: No response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotImplemented:
      description: Not implemented
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadGateway:
      description: BadGateway
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServiceUnavailable:
      description: Service unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Insufficient Storage:
      description: Insufficient Storage
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    LoopDetected:
      description: Loop detected
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BandwidthLimitExceeded:
      description: Bandwidth limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotExtended:
      description: Not extended
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NetworkAuthenticationRequired:
      description: Network authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NetworkConnectTimeoutError:
      description: Network connect timeout error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      oneOf:
        - $ref: '#/components/schemas/InternalError'
        - $ref: '#/components/schemas/ValidationError'
        - $ref: '#/components/schemas/ControllerError'

    InternalError:
      type: object
      properties:
        timestamp:
          type: string
          example: 2020-03-22T20:26:47.367+0000
        status:
          type: string
          example: 404
        error:
          type: string
          example: Not Found
        message:
          type: string
        path:
          type: string
      
    ValidationError:
      type: object
      properties:
        timestamp:
          type: string
          example: 2020-03-22T14:52:51.714+0000
        status:
          type: string
          example: 400
        error:
          type: string
          example: Bad Request
        message:
          type: string
        path:
          type: string
        errors:
          type: array
          items:
            type: object
            properties:
              codes:
                type: array
                items:
                  type: string
              arguments:
                type: array
                items:
                  additionalProperties:
                    type:
                      string
              default_message:
                type: string
              object_name:
                type: string
              field:
                type: string
              rejected_value:
                type: string
              binding_failure:
                type: boolean
              code:
                type: string

    ControllerError:
      type: object
      properties:
        status:
          type: integer
          example: 404
        message_key:
          type: string
          example: NOT_FOUND
        extra:
          type: string
      required:
        - message_key
        - status